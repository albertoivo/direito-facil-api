"""Initial migration

Revision ID: 292783a11204
Revises:
Create Date: 2025-06-22 07:49:34.933471

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "292783a11204"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("idx_users_email"), table_name="users")
    op.drop_index(op.f("idx_users_nome"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("nome", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "hashed_password",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "role",
            sa.VARCHAR(length=50),
            server_default=sa.text("'user'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.CheckConstraint(
            "role::text = ANY (ARRAY['user'::character varying, 'admin'::character varying]::text[])",
            name=op.f("users_role_check"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
        sa.UniqueConstraint(
            "email",
            name=op.f("users_email_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("idx_users_nome"), "users", ["nome"], unique=False)
    op.create_index(op.f("idx_users_email"), "users", ["email"], unique=False)
    # ### end Alembic commands ###
